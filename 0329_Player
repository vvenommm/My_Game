package f_game;

import e_oop.ScanUtil;
import f_game.Foods.Hamburger;

public class Player {

	String name; //이름
	int exp; //경험치
	int money;
	int level; //레벨
	Foods[] recipes; //보유 음식 레시피
	int[] recipesNum;
	
	//초기화
	Player(String name){
		this.name = name;
		this.exp = 0;
		this.money = 100000;
		this.level = 1;
		this.recipes = new Foods[7];
		this.recipesNum = new int[7];
	}
	
	
	
	//플레이어 정보
	void showStatus() { 
		System.out.println("\n");
		System.out.println("┌────────────────────┐");
		System.out.println("          내 정보");
		System.out.println("\n    이름 : " + name);
		System.out.println("    레벨 : " + level);
		System.out.println("    경험치 : " + exp + "/1000");
		System.out.println("    재산 : " + money + "원");
		System.out.println("\n -------보유 레시피-------");
		for(int i = 0; i < recipes.length; i++) {
			if(recipes[i] != null) {
				recipes[i].showMenuInfo();
			}
		}
		System.out.println("└────────────────────┘\n\n");
	}
	
	

	//주문받기
	void playing (Player p, Customer c, Foods f) {
		int code = 0;
		int temp = 0;
		boolean flag = true;		
		while(flag == true) {
			int ran = (int)(Math.random()*7);
			if (recipes[ran] != null) {
				stop(500);
				System.out.println(c.name + " : 안녕하세요~ " + recipes[ran].name + " 주세요!");
				temp = ran;
				flag = false;
				break;
			}
		}
		stop(500);
		System.out.println(p.name + " : 네~♬ " + recipes[temp].name + " 주문 받았습니다~\n");
		stop(500);
		System.out.println("[SYSTEM] " + recipes[temp].name + "을/를 조리해 봅시다!");
		stop(500);
		code = recipes[temp].code;
		serve(code, temp, p, c, f);
	}
	
	
	
	//플레이어의 조리 시도
	void serve(int code, int temp, Player p, Customer c, Foods f) {
		System.out.println("[SYSTEM] 숫자를 입력해서 재료를 차곡차곡 쌓아보세요!");
		stop(500);
		System.out.println("[SYSTEM] 음료의 경우 해당 번호만 입력하면 됩니다.\n");
		stop(500);
		System.out.println("┌──────────────┐");
		System.out.println("    *재료*");
		System.out.println("  1. 빵\n  2. 고 기 패 티\n  3. 치 킨 패 티\n  4. 비 건 패 티\n  5. 치 즈\n  6. 피 클\n  7. 양 상 추\n  8. 양 파\n  9. 소 스\n --------------\n  1. 물\n  2. 뜨 거 운  물\n  3. 얼음\n  4. 에 스 프 레 소\n  5. 콜 라");
		System.out.println("└───────────────┘");
		System.out.println("->");
		int input = ScanUtil.nextInt1();
		cooking(input, code, temp, p, c, f);
		stop(500);
	}
		
		
		
	//조리하기 - 이모티콘 출력
	void cooking(int input, int code, int temp, Player p, Customer c, Foods f) {
		if(input == 16257891) {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			stop(500);
			Foods.ham();
			stop(500);
			if(code == 16257891) {
				System.out.println("\n\n" + c.name + " :");
				c.reaction1();
				Hoos_Burgers.pay(temp, p, c, f);
				getEXP(p, temp, f, c);
				f.getRecipe(p, f);
			}else {
				System.out.println("\n\n" + c.name + " :");
				c.reaction2();
				Hoos_Burgers.payFail(temp, p, c, f);
				loseEXP(p, temp, f, c);
			}
		}else if(input == 16853791) {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			Foods.chick();
			if(code == 16853791) {
				System.out.println("\n\n" + c.name + " :");
				c.reaction1();
				Hoos_Burgers.pay(temp, p, c, f);
				getEXP(p, temp, f, c);
				f.getRecipe(p, f);
			}else {
				System.out.println("\n\n" + c.name + " :");
				c.reaction2();
				Hoos_Burgers.payFail(temp, p, c, f);
				loseEXP(p, temp, f, c);
			}
		}else if(input == 15625791) {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			Foods.chee();
			if(code == 15625791) {
				System.out.println("\n\n" + c.name + " :");
				c.reaction1();
				Hoos_Burgers.pay(temp, p, c, f);
				getEXP(p, temp, f, c);
				f.getRecipe(p, f);
			}else {
				System.out.println("\n\n" + c.name + " :");
				c.reaction2();
				Hoos_Burgers.payFail(temp, p, c, f);
				loseEXP(p, temp, f, c);
			}
		}else if(input == 1846971) {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			Foods.veg();
			if(code == 1846971) {
				System.out.println("\n\n" + c.name + " :");
				c.reaction1();
				Hoos_Burgers.pay(temp, p, c, f);
				getEXP(p, temp, f, c);
				f.getRecipe(p, f);
			}else {
				System.out.println("\n\n" + c.name + " :");
				c.reaction2();
				Hoos_Burgers.payFail(temp, p, c, f);
				loseEXP(p, temp, f, c);
			}
		}else if(input == 35) {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			Foods.drink();
			if(code == 35) {
				System.out.println("\n\n" + c.name + " :");
				c.reaction1();
				Hoos_Burgers.pay(temp, p, c, f);
				getEXP(p, temp, f, c);
				f.getRecipe(p, f);
			}else {
				System.out.println("\n\n" + c.name + " :");
				c.reaction2();
				Hoos_Burgers.payFail(temp, p, c, f);
				loseEXP(p, temp, f, c);
			}
		}else if(input == 24) {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			Foods.hotC();
			if(code == 24) {
				System.out.println("\n\n" + c.name + " :");
				c.reaction1();
				Hoos_Burgers.pay(temp, p, c, f);
				getEXP(p, temp, f, c);
				f.getRecipe(p, f);
			}else {
				System.out.println("\n\n" + c.name + " :");
				c.reaction2();
				Hoos_Burgers.payFail(temp, p, c, f);
				loseEXP(p, temp, f, c);
			}
		}else if(input == 3144) {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			Foods.iceC();
			if(code == 3144) {
				System.out.println("\n\n" + c.name + " :");
				c.reaction1();
				Hoos_Burgers.pay(temp, p, c, f);
				getEXP(p, temp, f, c);
				f.getRecipe(p, f);
			}else {
				System.out.println("\n\n" + c.name + " :");
				c.reaction2();
				Hoos_Burgers.payFail(temp, p, c, f);
				loseEXP(p, temp, f, c);
			}
		}else {
			System.out.println("\n\n[SYSTEM] 재료비로 " + p.recipes[temp].cost + "원을 썼습니다.\n\n");
			stop(500);
			Foods.WrongOrder();
			stop(500);
			System.out.println("\n\n" + c.name + " :");
			c.reaction3();
			Hoos_Burgers.payFail(temp, p, c, f);
			loseEXP(p, temp, f, c);
		}
	}

	
	
	//성공 시 속성 변경
	void getEXP(Player p, int temp, Foods f, Customer c){
		stop(500);
		System.out.println("[SYSTEM] PERFECT!!\n\n");
		stop(500);
		System.out.println("[SYSTEM] " + c.name + "(이)가 " + p.recipes[temp].price + "원을 계산했습니다.");
		stop(500);
		System.out.println("[SYSTEM] 완료 보상으로 " + p.recipes[temp].exp + "의 경험치를 얻었습니다.");
		while(1000 <= this.exp) {
			this.exp -= 1000;
			levelUP(p, c);
		}	
	}
	
	
	
	//실패 시 속성 변경
	void loseEXP(Player p, int temp, Foods f, Customer c){
		stop(500);
		System.out.println("[SYSTEM] 엉망진창 음식!!\n[SYSTEM] " + c.name + "(이)가 주문한 음식이 아닙니다!!!\n");
		stop(500);
		System.out.println("[SYSTEM] " + c.name + "(이)가 " + p.recipes[temp].price/2 + "원만 계산했습니다.");
		stop(500);
		System.out.println("[SYSTEM] " + c.exp + "만큼 경험치가 깎였습니다.\n\n");
		while(0 >= this.exp) {
			this.exp += 1000;
			levelDOWN(p, c);
		}
	}
	
	
	
	//레벨 업
	void levelUP(Player p, Customer c) {
		int bonus = 20000;
		level++;
		money += bonus;
		if(level == 3) {
			stop(500);
			c.sucEnding();
			stop(500);
			System.out.println("[SYSTEM] 🎉🎉 최고 레벨 도달 🎉🎉");
			stop(500);
			System.out.println("[SYSTEM] " + p.name + "'s Burgers 키우기 성공!!!");
			stop(500);
			System.out.println("[SYSTEM] 모든 미션을 완수하여 더 이상 진행할 미션이 없습니다.\n[SYSTEM] 게임을 종료합니다.");
			stop(500);
			System.out.println("[SYSTEM] 0. 종료하기를 입력해주세요.\n->");
			int input = ScanUtil.nextInt1();
			System.out.println("게임을 종료합니다.");
			System.out.println("제작 : 후후리\n도움 : 김*섭, 달래, 솜솜");
			System.exit(input);
		}else {
		stop(500);
		System.out.println("        \n\n◆◇◆ LEVEL UP ◇◆◇\n");
		stop(500);
		System.out.println("        ＼😆へ　 へ😁ヘ　 く😎/ ");
		System.out.println("        ヘ / 　　　 ( ヘ　　 　( ヘ ");
		System.out.println("                　 >　 　 <　　　　く");
		stop(500);
		System.out.println("\n\n[SYSTEM] 레벨 업!! " + level + "이/가 되었습니다!");
		stop(500);
		System.out.println("[SYSTEM] 레벨 업 보상으로 " + bonus + "원을 받았습니다!\n\n");
		}
	}
	
	
	//레벨 다운
	void levelDOWN(Player p, Customer c) {
		int penalty = (int)(Math.random()*1001);
		level--;
		money -= penalty;
		if(level == 0) {
			stop(500);
			c.failEnding();
			stop(500);
			System.out.println("🚨🚨🚨🚨 도전 실패 🚨🚨🚨🚨");
			stop(500);
			System.out.println("[SYSTEM] " + p.name + "'s Burgers 키우기 미션을 실패하였습니다!!!");
			stop(500);
			System.out.println("[SYSTEM] 게임을 더 이상 진행할 수 없습니다.\n[SYSTEM] 게임을 종료합니다.");
			stop(500);
			System.out.println("[SYSTEM] 0. 종료하기를 입력해주세요.\n->");
			int input = ScanUtil.nextInt1();
			System.out.println("게임을 종료합니다.");
			System.out.println("제작 : 후후리\n도움 : 김*섭, 달래, 솜솜");
			System.exit(input);
		}else if(money < 0){
			stop(500);
			c.failEnding();
			stop(500);
			System.out.println("📢📢📢📢 파산 📢📢📢📢");
			stop(500);
			System.out.println("[SYSTEM] " + p.name + "'s Burgers 키우기 미션을 실패하였습니다!!!");
			stop(500);
			System.out.println("[SYSTEM] 게임을 더 이상 진행할 수 없습니다.\n[SYSTEM] 게임을 종료합니다.");
			stop(500);
			System.out.println("[SYSTEM] 0. 종료하기를 입력해주세요.\n->");
			int input = ScanUtil.nextInt1();
			System.out.println("게임을 종료합니다.");
			System.out.println("제작 : 후후리\n도움 : 김*섭, 달래, 솜솜");
			System.exit(input);
		}else {
		stop(500);
		System.out.println("!!!!!! LEVEL DOWN !!!!!!");
		stop(500);
		System.out.println("[SYSTEM] 레벨이 뚝 떨어졌습니다.");
		stop(500);
		System.out.println("!!!!!! LEVEL DOWN !!!!!!\n\n");
		stop(500);
		System.out.println("[SYSTEM] " + p.name + "(이)가 반성하는 마음으로 " + penalty + "원을 기부했습니다!\n\n");
		}
	}
	
	public void hint() {
//		int x = 0;
		String[] hints = {"\n  [TIP] 처음에는 햄버거만 조리할 수 있어요!\n    햄버거 : 빵 + 피클 + 고기패티 + 치즈 + 양상추 + 양파 + 소스 + 빵",
				"\n  [TIP] 손님 이름은 406호 학생들 이름이랍니다!",
				"\n  [TIP] 치즈버거에는 치즈가 ✌2장✌ 들어간답니다!\n    치즈버거 : 빵 + 치즈 + 피클 + 고기패티 + 치즈 + 양상추 + 소스 + 빵",
				"\n  [TIP] 재료를 뒤죽박죽으로 쌓으면 조리에 실패합니다!!",
				"\n  [TIP] 치킨패티는 별(☆★☆★)로 만들었어요~\n    치킨버거 : 빵 + 피클 + 고기패티 + 치즈 + 양상추 + 양파 + 소스 + 빵",
				"\n  [TIP] 처음에는 햄버거만 조리할 수 있어요!\n    햄버거 : 빵 + 피클 + 고기패티 + 치즈 + 양상추 + 양파 + 소스 + 빵",
				"\n  [TIP] 소스는 항상 마지막에 뿌려줘요!\n    비건버거 빼고~",
				"\n  [TIP] 처음에는 햄버거만 조리할 수 있어요!\n    햄버거 : 빵 + 피클 + 고기패티 + 치즈 + 양상추 + 양파 + 소스 + 빵",
				"\n  [TIP] 비건버거에는 콩고기 패티가! 안심하고 드세요~\n    빵 + 양파 + 콩패티(●○●○●) + 피클 + 소스 + 양상추 + 빵"};
		
		int x = (int)(Math.random()*hints.length);
//		for(int i = 0; i < hints.length; i++) {
		System.out.println("\n\n\n\n\n\n\n\n\n\n    L O A D I N G . . .\n\n"+ hints[x] + "\n\n\n\n\n\n\n\n\n\n\n");
//		if(x == hints.length-1) {
//			x = 0;
//		}
		stop(1300);
//		}
//		return x;
	}
	
	
	
	private void stop(int number) {
		try {
			Thread.sleep(number);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
		
}
